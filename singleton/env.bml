open Syntax

module Env :> {
  type t

  val empty : t
  val insert : t -> var -> kind -> t
  val lookup : t -> var -> result Errors.t kind
} = {
  module M = Map.Make Var

  type t = M.t kind

  datatype error =
    | Unbound of var

  module E = Errors.F {
    type error = error

    val error_type = ErrorType.Env

    open Pretty

    val show_error = function
      | Unbound v -> "unbound variable:" <+> v
    end
  }

  val empty = M.empty
  val insert env v k = M.insert v k env
  val lookup env v = Result.from_option (E.lift $ Unbound v) $ M.lookup v env
}
