module Base :> {
  datatype t =
    | Int
    | Bool

  val show : t -> string
} = {
  datatype t =
    | Int
    | Bool

  val show = function
    | Int  -> "int"
    | Bool -> "bool"
  end
}

type base = Base.t

module Index :> {
  datatype t =
    | Fst
    | Snd

  val show : t -> string
} = {
  datatype t =
    | Fst
    | Snd

  val show = function
    | Fst -> "1"
    | Snd -> "2"
  end
}

type index = Index.t

module Var :> {
  type t

  include Ord.OPS where type t := t

  val show : t -> string

  val fresh : string -> t
} = {
  include Ord.Make {
    type t = int * string

    val compare (m, _) (n, _) = Int.compare m n
  }

  val show (n, s) =
    open Pretty in
    s <> brack (Int.show n)

  module R = Ref.Make {type t = int}

  val counter = R.make 0

  val fresh s =
    let
      val n = R.get counter
      val _ : unit = R.set counter $ n + 1
    in
      (n, s)
}

type var = Var.t

datatype kind =
  | T
  | S of ty
  | DepProd of var * kind * kind
  | DepSum of var * kind * kind

and ty =
  | Base of base
  | Var of var
  | Abs of var * ty * ty
  | App of ty * ty
  | Pair of ty * ty
  | Proj of index * ty

include {
  val rec labeled_singleton ty = function
    | T                  -> S ty
    | S _                -> S ty
    | DepProd(v, k1, k2) -> DepProd(v, k1, labeled_singleton (App(ty, Var v)) k2)
    | DepSum(v, k1, k2)  -> open Index in DepSum(v, labeled_singleton (Proj(Fst, ty)) k1, labeled_singleton (Proj(Snd, ty)) k2)
  end
} : {
  val labeled_singleton : ty -> kind -> kind
}
